#include <stdio.h>
#include "opencv2/core/core.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/nonfree/nonfree.hpp"
#include <iostream>
#include "opencv2/calib3d/calib3d.hpp"

using namespace cv;
using namespace std;


class Manual{
	
public: Manual(string pathImgCT, string pathImgMRI);
		Mat imgct;
		Mat imgmri;
		Mat common;
		int angle;
		int x;
		int y;
		float scale;
		void info();
		void show(Mat);
		void rotate_image(Mat &imgsmall, Mat &imgbig, Mat &results, int angle, Point position);
		void scale_image(Mat &, Mat &, double );
};

Manual::Manual(string pathImgCT, string pathImgMRI){
	imgct = imread(pathImgCT);
	imgmri = imread(pathImgMRI);
	angle = 0;
	x = 0;
	y = 0;
	scale = 1.0;
}

void Manual::info(){
	cout << "imgct size: " << imgct.size() << endl; 
	cout << "mri size: "   << imgmri.size() << endl;
	cout << "angle: "      << angle << endl;
	cout << "x: "          << x << ", y: " << y << endl;
	cout << "scale: "	   << scale << endl;

}

void Manual::show(Mat img){
	
	imshow("Window", img);
	waitKey(0);
}

void Manual::scale_image(Mat &imginp, Mat &imgout, double scale){

	resize(imginp, imgout, Size(round(imginp.cols*scale), round(imginp.rows*scale)));
	cout << "przed skalowaniem: " << imginp.size() << " po skalowaniu: " << imgout.size() << endl;
}


void Manual::rotate_image(Mat &imgsmall, Mat &imgbig, Mat &results, int angle, Point position){

	//Mat black(1500, 1500, 0);
	Point2f pc(imgsmall.cols / 2., imgsmall.rows / 2.);
	Mat r = getRotationMatrix2D(pc, angle, 1.0);


	Mat rotated;
	//warpAffine(resized, rotated, r, resized.size());

	Rect bbox = cv::RotatedRect(pc, imgsmall.size(), angle).boundingRect();
	r.at<double>(0, 2) += bbox.width / 2.0 - pc.x;
	r.at<double>(1, 2) += bbox.height / 2.0 - pc.y;

	cv::Mat dst;
	cv::warpAffine(imgsmall, dst, r, bbox.size());

	imgbig.copyTo(results);
	dst.copyTo(results(cv::Rect(position.x, position.y, dst.cols, dst.rows)));
}


void main(){
	string path1 = "D:/codes/Krzycha/test_img.png";
	string path2 = "D:/codes/Krzycha/test_img_small.jpg";

	Manual test (path1, path2);
	test.info();
	//Mat img3;
	//test.scale_image(test.mri, img3, 0.3);
	//test.show(img3);

	test.scale_image(test.imgmri, test.imgmri, 0.5);

	test.rotate_image(test.imgmri, test.imgct, test.common, 50, Point(100, 100));
	
	test.show(test.common);
}
